public class VideoDemo extends Activity {

private MediaController ctlr;


VideoView videoView = null;

Context context = null;
long totalRead = 0;
int bytesToRead = 50 * 1024;

private int mPlayerPosition;
private File mBufferFile;

@Override
public void onCreate(Bundle icicle) {
    super.onCreate(icicle);
    getWindow().setFormat(PixelFormat.TRANSLUCENT);
    setContentView(R.layout.main);




    videoView = (VideoView) findViewById(R.id.videoview);


    ctlr = new MediaController(this);

    ctlr.setMediaPlayer(videoView);
    videoView.setMediaController(ctlr);
    videoView.requestFocus();

    new GetYoutubeFile().start();


}



private class GetYoutubeFile extends Thread {
    private String mUrl;
    private String mFile;

    public GetYoutubeFile() {

    }

    @Override
    public void run() {
        super.run();
        try {

            File bufferingDir = new File(
                    Environment.getExternalStorageDirectory()
                            + "/YoutubeBuff");
            InputStream stream = getAssets().open("famous.3gp");
            if (stream == null)
                throw new RuntimeException("stream is null");
            File temp = File.createTempFile("test", "mp4");
            System.out.println("hi");
            temp.deleteOnExit();
            String tempPath = temp.getAbsolutePath();

            File bufferFile = File.createTempFile("test", "mp4");

            BufferedOutputStream bufferOS = new BufferedOutputStream(
                    new FileOutputStream(bufferFile));


            InputStream is = getAssets().open("famous.3gp");
            BufferedInputStream bis = new BufferedInputStream(is, 2048);

            byte[] buffer = new byte[16384];
            int numRead;
            boolean started = false;
            while ((numRead = bis.read(buffer)) != -1) {

                bufferOS.write(buffer, 0, numRead);
                bufferOS.flush();
                totalRead += numRead;
                if (totalRead > 120000 && !started) {
                    Log.e("Player", "BufferHIT:StartPlay");
                    setSourceAndStartPlay(bufferFile);
                    started = true;
                }

            }
            mBufferFile = bufferFile;

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

public void setSourceAndStartPlay(File bufferFile) {
    try {

        mPlayerPosition=videoView.getCurrentPosition();
        videoView.setVideoPath(bufferFile.getAbsolutePath());

        videoView.start();

    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalStateException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
}

public void onCompletion(MediaPlayer mp) {
    mPlayerPosition = mp.getCurrentPosition();
    try {
        mp.reset();
        videoView.setVideoPath(new File("mnt/sdcard/YoutubeBuff/"
                + mBufferFile).getAbsolutePath());
        mp.seekTo(mPlayerPosition);
        videoView.start();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalStateException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }

}




TRACKPAD BEHAVIOUR
            drag normally  =>  0_0_ 0_2_ ... 0_1_
                                                                =>can turn into zoom or scrolls

            press and drag   =>  0_0_ 0_1_ 0_0_ 0_2_ ... 0_1_ (quick-tap)
                                                    =>can turn into zoom or scrolls

            lclick          =>  0_0_ 0_1_

            rclick          =>  0_0_ 1_0_ 0_1_ 1_1_

            scroll_up       =>  0_0_ 1_0_ 0_2_ 1_2_ ... 0_1_ 1_1_ (downwards)

            scroll_down     =>  0_0_ 1_0_ 0_2_ 1_2_ ... 0_1_ 1_1_ (upwards)

            zoom            =>  0_0_ 1_0_ *_2_ ... 0_1_ 1_1_

PEN BEHAVIOUR

            press and drag  =>  0_0_ 0_2_ ... 0_1_
                                                    =>can turn into zoom or scrolls

            drag normally (not necessary for pen)   =>  0_0_ 0_1_ 0_0_ 0_2_ ... 0_1_ (quick-tap)
                                                    =>can turn into zoom or scrolls

            cancel (ctrl-z?)         => 0_0_ 0_2_ ... 1_0_ 1_1_ 1_0_ 1_1_ 0_1_

            lclick          =>  0_0_ 0_1_

            rclick          =>  0_0_ 1_0_ 0_1_ 1_1_

            scroll_up       =>  0_0_ 1_0_ 0_2_ 1_2_ ... 0_1_ 1_1_ (downwards)

            scroll_down     =>  0_0_ 1_0_ 0_2_ 1_2_ ... 0_1_ 1_1_ (upwards)

            zoom            =>  0_0_ 1_0_ *_2_ ... 0_1_ 1_1_

"Processing"    => flags
"automaton"  => mouse control
Mouse events only happen on move
mouse wait events will mark the timestamp, for the next to check
    => decide if "up" or "up_fast"


0 -  0_0_ == 1º touch down
1 -  0_1_ == 1º touch up
2 -  1_0_ == 2º touch down
3 -  1_1_ == 2º touch up
4 -  2_0_ == 3º touch down
5 -  2_1_ == 3º touch up
6 -  0_2_ == 1º move
7 -  1_2_ == 2º move
8 -  2_2_ == 3º move
9 - 0_3_ == 1º cancel
10 - 1_3_ == 2º cancel
11 - 2_3_ == 3º cancel


